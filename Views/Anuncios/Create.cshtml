@model HomeIndexViewModel

@{
    ViewData["Title"] = "Bienvenido a Wallaboo - Crea tu Anuncio";
}

<div class="text-center mb-4">
    <h2>Nuevo anuncio</h2>
</div>

<div class="container d-flex justify-content-center">
    @if (User.Identity is not null && User.Identity.IsAuthenticated)
    {
        <div class="col-md-8">
            <!-- Colocamos el contenido dentro de una columna -->
            <h5 class="alert text-danger">@ViewBag.Msg</h5>
            <form asp-action="Create" enctype="multipart/form-data" method="post" class="mt-4">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label asp-for="Descripcion" class="form-label"></label>
                        @Html.TextArea("Descripcion", null, new { @class = "form-control", rows = 4 }) <!-- Aumenta el tamaño del campo de descripción -->
                        <span asp-validation-for="Descripcion" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label asp-for="FechaDesde" class="form-label"></label>
                        <input asp-for="FechaDesde" class="form-control" type="datetime-local" id="FechaDesde" />
                        <span asp-validation-for="FechaDesde" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="FechaHasta" class="form-label"></label>
                        <input asp-for="FechaHasta" class="form-control" type="datetime-local" id="FechaHasta" />
                        <span asp-validation-for="FechaHasta" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-2">
                        <label asp-for="Precio" class="form-label"></label>
                        <input asp-for="Precio" class="form-control" />
                        <span asp-validation-for="Precio" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label for="imagenUpload">Seleccionar Imágenes:</label>
                        <input type="file" name="imagenes" id="imagenUpload" accept="image/*" multiple class="form-control" />
                        <span class="text-danger" id="imagenError"></span>
                    </div>
                </div>
                <!-- Botones dispuestos en columnas con tamaños fijos -->
                <div class="row mb-3">
                    <div class="col-md-4" style="width: 150px;">
                        <input type="submit" value="Crear" class="btn btn-primary btn-fixed" />
                    </div>
                    <div class="col-md-4" style="width: 150px;">
                        <a asp-action="Index" class="btn btn-primary btn-fixed">Inicio</a>
                    </div>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="text-center">
            <h3>¡Inicia sesión para crear y visualizar anuncios!</h3>
        </div>
    }
</div>

@section Scripts {
    @* Renderización de scripts de validación *@
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Obtener la fecha y hora actual en formato YYYY-MM-DDTHH:MM
        const now = new Date().toISOString().slice(0, 16); // Formato requerido para datetime-local

        // Asignar la fecha y hora mínima a los inputs de datetime-local
        document.getElementById('FechaDesde').setAttribute('min', now);
        document.getElementById('FechaHasta').setAttribute('min', now);

        // Validar que la fecha y hora de finalización no sea anterior a la de inicio
        document.getElementById('FechaDesde').addEventListener('change', function () {
            document.getElementById('FechaHasta').setAttribute('min', this.value);
        });
    </script>
}
